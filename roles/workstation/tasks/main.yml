---
# tasks file for roles/workstation

# Additional packages
- name: "Installing additional packages"
  become_exe: sudo
  dnf:
    name:
      - git
      - flatpak
      - gimp
#      - google-chrome-stable
      - gnome-terminal-nautilus
      - gnome-tweak-tool
      - htop
      - levien-inconsolata-fonts
      - ranger
      - tmux
      - fish
      - util-linux
      - jetbrains-mono-fonts-all
    state: present

# Cleanup
- name: Remove unwanted package
  dnf:
    name:
      - open-vm-tools
      - firewalld
      - gnome-boxes
      - virtualbox-guest-additions
      - libvirt-libs
      - libvirt
    state: absent
  
# Shell
- name: Update default shell to fish
  user:
    name: docker
    shell: /usr/bin/fish
    append: yes

# icc brightness

- name: Installing package for icc-brightness
  dnf:
    name:
      - lcms2-devel
      - make
      - gcc
    state: present

- name: Pull icc-brightness
  git:
    repo: 'https://github.com/udifuchs/icc-brightness.git'
    dest: /tmp/icc-brightness


- name: Build the default target
  make:
    chdir: /tmp/icc-brightness

- name: Run 'install' target as root
  make:
    chdir:  /tmp/icc-brightness
    target: install
  become: yes

# Install brave

- name: Add Brave repository
  yum_repository:
    name: brave
    description: Brave RPM repository
    baseurl: https://brave-browser-rpm-release.s3.brave.com/x86_64/

- name: Importing rpm-gpg key from brave
  rpm_key:
    state: present
    key: https://brave-browser-rpm-release.s3.brave.com/brave-core.asc

- name: "Installing package for brave"
  dnf:
    name:
      - brave-browser
    state: present

# Flatpak

# - name: Add the Gnome flatpak remote to the system installation
#   flatpak_remote:
#     name: gnome
#     state: present
#     flatpakrepo_url: https://sdk.gnome.org/gnome-apps.flatpakrepo

- name: Add the flathub flatpak repository remote to the user installation
  flatpak_remote:
    name: flathub
    state: present
    flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo

- name: Install flatpak packages
  flatpak:
    name: "{{ item }}"
    state: present
  loop:
     - com.spotify.Client
     - com.slack.Slack
     - com.discordapp.Discord
     - com.axosoft.GitKraken
     - com.microsoft.Teams
     - com.leinardi.gst
     - com.github.calo001.fondo
     - com.getpostman.Postman
     - org.gnome.Builder


# SSH keys
- name: Create a 2048-bit SSH key for user agravelot in ~agravelot/.ssh/id_rsa
  user:
    name: agravelot
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_file: .ssh/id_rsa


# Docker
- name: Cleanup conflicts package with docker
  dnf:
    name:
      - docker
      - docker-client
      - docker-client-latest
      - docker-common
      - docker-latest
      - docker-latest-logrotate
      - docker-logrotate
      - docker-selinux
      - docker-engine-selinux
      - docker-engine
    state: absent

- name: Add Docker repo
  get_url:
      url: https://download.docker.com/linux/fedora/docker-ce.repo
      dest: /etc/yum.repos.d/docker-ce.repo
  become: yes

- name: Change docker repository version to 31 unitl 32 released
  replace:
    path: /etc/yum.repos.d/docker-ce.repo
    regexp: '\$releasever'
    replace: '31'

- name: "Installing docker"
  dnf:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-compose
    state: present

- name: Make sure docker service is running
  systemd:
    state: started
    name: docker
    enabled: yes

- name: Add user agravelot to docker group
  user:
    name: agravelot
    groups: docker
    append: yes

# LDAC / AptX support
- name: remove previous codecs
  dnf:
    name: pulseaudio-module-bluetooth
    state: absent

- name: Add LDAC/AptX codecs
  dnf:
    name:
      - pulseaudio-module-bluetooth-freeworld
    state: present

# Intel undervolt
- git:
    repo: 'https://github.com/kitsunyan/intel-undervolt.git'
    dest: /tmp/intel-undervolt

- name: Enable systemd build
  command: ./configure --enable-systemd
  args:
    chdir: /tmp/intel-undervolt

- name: Build the default target
  make:
    chdir: /tmp/intel-undervolt

- name: Run 'install' target as root
  make:
    chdir:  /tmp/intel-undervolt
    target: install
  become: yes

- name: Make sure intel-undervolt service is running
  systemd:
    state: started
    name: intel-undervolt
    enabled: yes

# TODO Add config


# NodeJS
- name: Add NodeJS repository
  dnf:
    name: https://rpm.nodesource.com/pub_13.x/fc/32/x86_64/nodesource-release-fc32-1.noarch.rpm
    state: present

- name: Add Docker repo
  get_url:
      url: https://dl.yarnpkg.com/rpm/yarn.repo
      dest: /etc/yum.repos.d/yarn.repo
  become: yes

- name: Install Node.js and yarn
  dnf:
    name:
      - nodejs
      - gcc-c++
      - make
      - yarn
    state: present

# Postgres

- name: Install postgres
  dnf:
    name:
      - postgresql-server
      - postgresql-contrib
      - python3-psycopg2

- name: Init postgres
  command:
    cmd: postgresql-setup --initdb --unit postgresql
    creates: /var/lib/pgsql/data

- name: Grant users agravelot access to databases agravelot from samehost
  postgresql_pg_hba:
    dest: /var/lib/pgsql/data/pg_hba.conf
    contype: host
    method: md5
    users: agravelot
    source: samehost
    create: true

- name: Cleanup peer logins
  postgresql_pg_hba:
    dest: /var/lib/pgsql/data/pg_hba.conf
    contype: local
    method: peer
    users: all
    state: absent

- name: Cleanup peer logins
  postgresql_pg_hba:
    dest: /var/lib/pgsql/data/pg_hba.conf
    contype: local
    method: peer
    users: all
    databases: replication
    state: absent

- name: Can login postgres without password (postgres bypass)
  postgresql_pg_hba:
    dest: /var/lib/pgsql/data/pg_hba.conf
    contype: host
    method: trust
    users: postgres
    source: samehost
    state: present

- name: Make sure postgresql service is running
  systemd:
    state: restarted
    name: postgresql
    enabled: no

# - name: Connect to agravelot database, create agravelot user, and grant access to database
#   postgresql_user:
#     db: agravelot
#     name: agravelot
#     password: agravelot

- name: Remove postgres bypass
  postgresql_pg_hba:
    dest: /var/lib/pgsql/data/pg_hba.conf
    contype: host
    method: trust
    users: postgres
    source: samehost
    state: absent

- name: Make sure postgresql service is running
  systemd:
    state: restarted
    name: postgresql
    enabled: no

# Jetbrain toolbox

- name: Check if JetBrains Toolbox is already installed
  stat:
    path: /home/agravelot/.jetbrain
  register: st_jetbrains_toolbox

- block:
    - name: Get available releases
      uri:
        url: https://data.services.jetbrains.com/products/releases?code=TBA&type=release
        method: GET
      register: jetbrains_toolbox_available_releases

    - name: Get versions
      set_fact:
        jetbrains_toolbox_versions: "{{ jetbrains_toolbox_available_releases.json.TBA | map(attribute='version') | list }}"

    - name: Update version fact if latest is overridden
      set_fact:
        jetbrains_toolbox_version: "{{ jetbrains_toolbox_available_releases.json.TBA | sort(attribute='date', reverse=True) | map(attribute='version') | list | first }}"
      when: jetbrains_toolbox_version == 'latest'

    - name: Check if version is valid
      assert:
        that: (jetbrains_toolbox_version | string) in jetbrains_toolbox_versions
        msg: "The value of jetbrains_toolbox_version ({{ jetbrains_toolbox_version }}) is invalid. Available options are {{ jetbrains_toolbox_versions | join(', ') }}"

    - name: Create temporary download directory
      tempfile:
        state: directory
        suffix: ".jetbrains_toolbox_download"
      register: jetbrains_toolbox_download_dir
      changed_when: no

    - name: Download JetBrains Toolbox
      get_url:
        url: "{{ jetbrains_toolbox_available_releases.json | json_query(jetbrains_toolbox_download_query) | first }}"
        dest: "{{ jetbrains_toolbox_download_dir.path }}/jetbrains_toolbox.tar.gz"
        checksum: "sha256:{{ lookup('url', jetbrains_toolbox_available_releases.json | json_query(jetbrains_toolbox_checksum_link) | first) | regex_search('[A-Fa-f0-9]{64}') }}"
      vars:
        jetbrains_toolbox_download_query: "TBA[?version == '{{ jetbrains_toolbox_version }}'].downloads.linux.link"
        jetbrains_toolbox_checksum_link: "TBA[?version == '{{ jetbrains_toolbox_version }}'].downloads.linux.checksumLink"

    - name: Create installation folder
      file:
        path: /home/agravelot/.jetbrain
        state: directory

    - name: Unpack install archive
      unarchive:
        src: "{{ jetbrains_toolbox_download_dir.path }}/jetbrains_toolbox.tar.gz"
        dest: "/home/agravelot/.jetbrain"
        list_files: yes
        remote_src: yes
      register: jetbrains_toolbox_unarchive

    - name: Install JetBrains Toolbox
      command: "/home/agravelot/.jetbrain/{{ jetbrains_toolbox_unarchive.files | first }}/jetbrains-toolbox --install"
      become_user: agravelot
  when: st_jetbrains_toolbox.stat.exists == False
  always:
    - name: Delete temporary download directory
      file:
        path: "{{ jetbrains_toolbox_download_dir.path }}"
        state: absent
      changed_when: no

# VS Code

- name: Importing rpm-gpg key from vscode
  rpm_key:
    state: present
    key: https://packages.microsoft.com/keys/microsoft.asc

- name: Add Visual Studio Code repository
  yum_repository:
    name: Visual Studio Code
    description: Visual Studio Code
    baseurl: https://packages.microsoft.com/yumrepos/vscode
    gpgcheck: yes
    gpgkey: https://packages.microsoft.com/keys/microsoft.asc

- name: "Installing vscode"
  dnf:
    name:
      - code
    state: present


# nVidia

# PHP
- name: Install php with dependancies
  dnf:
    name:
      - php
      - composer
      - php-pecl-redis5
      - php-pecl-imagick
      - php-pgsql.x86_64

- composer:
    command: require
    global_command: yes
    arguments: hirak/prestissimo
  become_user: agravelot

# Grub
- name: Update grub config
  command: grubby --update-kernel=ALL --args "rhgb quiet i915.enable_fbc=1 i915.enable_guc=3 modprobe.blacklist=iTCO_wdt nowatchdog systemd.unified_cgroup_hierarchy=0 mem_sleep_default=deep"
  become: true

# GNOME

# needed by dconf module
- name: install psutil (Fedora)
  dnf:
    name: 
    - python3-psutil
    - dconf-editor

- name: Switch to Adwaita dark theme
  command:
    cmd: gsettings set org.gnome.desktop.interface gtk-theme 'Adwaita-dark'

# - name: nautilus use list view
#   command:
#     cmd: gsettings set org.gnome.nautilus.preferences.default-folder-viewer "'list-view'"

# - name: nautilus use list view
#   command:
#     cmd: gsettings set org.gnome.nautilus.list-view.default-visible-columns "['name', 'size', 'date_modified', 'permissions', 'owner', 'group']"

# - name: automatic timezone
#   dconf:
#     key: "/org/gnome/desktop/datetime/automatic-timezone"
#     value: "true"

# - name: file browser shortcut
#   dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/home"
#     value: "'<Super>f'"

# - name: Enable nigth mode
#   command:
#     cmd: dconf write /org/gnome/settings-daemon/plugins/color/night-light-enabled true
#   become_user: agravelot

# - name: Enable nigth mode
#   dconf:
#     key: /org/gnome/settings-daemon/plugins/color/night-light-enabled
#     value: 'true'

# Multimedia codecs 
# https://docs.fedoraproject.org/en-US/quick-docs/assembly_installing-plugins-for-playing-movies-and-music/
- name: Install codecs
  dnf:
    name:
      - gstreamer1-plugins-base
      - gstreamer1-plugins-bad-free
      - gstreamer1-plugins-bad-freeworld
      - gstreamer1-plugins-bad-free-extras
      - gstreamer1-plugins-bad-free-wildmidi
      - gstreamer1-plugins-bad-free-fluidsynth
      - gstreamer1-plugins-good
      - gstreamer1-plugins-good-qt
      - gstreamer1-plugins-good-gtk
      - gstreamer1-plugins-good-extras
      - gstreamer1-plugin-openh264
      - gstreamer1-libav
      - lame

- name: Upgrade the 'Multimedia' package group
  dnf:
    state: latest
    name: '@Multimedia'
    update_only: true

- name: Install nvidia graphics driver
  dnf:
    name:
      - vulkan
      - xorg-x11-drv-nvidia
      - xorg-x11-drv-nvidia-cuda
      - xorg-x11-drv-nvidia-cuda-libs
      - akmod-nvidia
      - xorg-x11-drv-nvidia
      - libva-intel-hybrid-driver
      - libva-intel-driver
      - libva-utils

# NVIDIA PRIME Support
- name: Enalble nvidia PRIME support
  copy:
    dest: /etc/modprobe.d/nvidia.conf
    content: options nvidia NVreg_DynamicPowerManagement=0x02


# Increase IO Notify limit

- name: set max_user_watches
  become: yes
  sysctl:
    name: fs.inotify.max_user_watches
    value: "524288"
    state: present